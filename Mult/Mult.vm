// ------------------------------------------------------------
// Mult.vm
//   Computes  a = x * y
//
//   Inputs (supplied by the test-harness):
//     static 0   x
//     static 1   y
//
//   Locals:
//     local 0   a  (running product)
//     local 1   i  (loop counter)
//
//   Returns the product as the function’s return value as well.
// ------------------------------------------------------------

function Mult.mul 2        // product & loop-counter

    // ----- initialise ---------------------------------------
    push constant 0        // a ← 0
    pop  local 0

    push static 1          // i ← y   (don’t destroy static 1)
    pop  local 1

    // ----- repeated-addition loop ---------------------------
    // while (i > 0) { a += x ; i-- }
    label LOOP_START
        push local 1
        push constant 0
        eq
        if-goto LOOP_END    // i == 0 ? break

        // a = a + x
        push local 0
        push static 0
        add                 // a + x
        pop  local 0

        // i--
        push local 1
        push constant 1
        sub
        pop  local 1

        goto LOOP_START
    label LOOP_END

    // ----- return a ----------------------------------------
    push local 0
    return
